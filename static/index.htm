<html>

<head>
    <title>INFO4310 - Spotify Global</title>
    <meta charset="UTF-8">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <style>
        @font-face {
            font-family: spotifyHeader;
            src: url("fonts/Gotham-Bold.otf");
        }

        @font-face {
            font-family: spotifyNormal;
            src: url("fonts/Gotham-Light.otf");
        }

        #gmap {
            width: 1600;
            height: 2000;
        }

        body {
            background-color: white;
        }

        /* my new styling */
        #starter-page,
        #explanation,
        #map-explore,
        #spider-plots,
        #world-playlist {
            height: 100vh;
            font-family: spotifyNormal, sans-serif;
        }

        #starter-page #row-1 {
            padding-top: 80px;
            padding-left: 100px;
        }

        #starter-page h1 {
            margin: 0;
            font-family: spotifyHeader, sans-serif;
            font-size: 75px;

        }

        #starter-page p {
            margin-top: 40px;

        }

        #starter-page #logo {
            height: 1.5em;
            position: relative;
            top: 28px;
        }

        #starter-page h2 {
            font-size: 40px;
        }

        #starter-page #row-2 {
            position: relative;
            padding-left: 100px;
            padding-right: 100px;
        }

        #starter-page button {
            position: absolute;
            top: 0;
            display: inline-block;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
            border-radius: 500px;
            transition-property: background-color, border-color, color, box-shadow, filter;
            transition-duration: .3s;
            border: 1px solid transparent;
            letter-spacing: 2px;
            min-width: 160px;
            text-transform: uppercase;
            white-space: normal;
            font-weight: 700;
            text-align: center;
            padding: 17px 48px;
            background-color: #1ED760;
            height: 48px;
        }

        #starter-page button:hover {
            background-color: #21e065;
        }

        #starter-page button a {
            color: white;
            text-decoration: none;
        }

        #starter-page #world-map-photo {
            position: absolute;
            right: 100px;
            width: 800px;
        }

        #explanation {
            padding: 100px;
            padding-bottom: 0;
            background-color: #f037a5;
            color: white;
            position: relative;
        }

        #explanation h1 {
            font-family: SpotifyHeader, sans-serif;
            font-size: 50px;
        }

        #explanation h2 {
            font-family: SpotifyHeader, sans-serif;
            color: #b9fcf0;
            font-size: 40px;
        }

        #explanation p,
        #explanation ul {
            font-size: 20px;
        }

        #explanation a {
            color: white;
        }

        #explanation img {
            position: absolute;
            max-width: 600px;
            right: 0;
            bottom: 0;
        }

        #map-explore {
            padding-left: 50px;
            padding-top: 100px;
            background-color: black;
            color: white;
        }

        #map-explore #row {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
        }

        #map-explore #col-1 {
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-left: 20px;
        }

        #map-explore h3 {
            margin-bottom: 100px;
        }

        #map-explore #col-1 #map-svg {
            position: relative;
        }

        #map-explore #col-1 button {
            position: absolute;
            left: 0;
            bottom: 0;
            display: inline-block;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
            border-radius: 500px;
            transition-property: background-color, border-color, color, box-shadow, filter;
            transition-duration: .3s;
            border: 1px solid transparent;
            letter-spacing: 2px;
            min-width: 160px;
            text-transform: uppercase;
            white-space: normal;
            font-weight: 700;
            text-align: center;
            padding: 16px 14px 18px;
            color: #616467;
            box-shadow: inset 0 0 0 2px #616467;
            background-color: white;
            height: 48px;
        }

        #map-explore #col-1 button:hover {
            color: #fff;
            background-color: #616467;
        }

        #map-explore #map-header {
            font-family: spotifyHeader, sans-serif;
            font-size: 30px;
        }

        #map-explore #col-2 {
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-left: 20px;
        }

        #map-explore #col-2 h1 {
            font-family: SpotifyHeader;
            color: grey;
            font-size: 40px;
        }

        #map-explore #col-2 span {
            color: white;
        }

        #map-explore .top-song {
            display: flex;
            flex-direction: row;
        }

        #map-explore .top-song p {
            display: flex;
            flex-direction: row;
            margin: 10px;
        }

        #spider-plots {
            background-color: #cdf564;
            padding: 30px;
        }

        #spider-plots #selected {
            font-family: SpotifyHeader, sans-serif;
            font-size: 40px;
        }

        #spider-plots #row-1 {
            display: flex;
            justify-content: flex-end;
        }

        #spider-plots #row-1 h1 {
            text-align: center;
            font-family: SpotifyHeader, sans-serif;
        }

        #spider-plots #row-1 #you-plot,
        #spider-plots #row-1 #country-plot {
            margin: 25px;
            flex-grow: 4;
        }

        #spider-plots #row-1 #comparison {
            flex-shrink: -2;

        }

        #spider-plots #row-2 {
            display: flex;
            justify-content: center;
        }

        #spider-plots #row-2 button {
            display: inline-block;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
            border-radius: 500px;
            transition-property: background-color, border-color, color, box-shadow, filter;
            transition-duration: .3s;
            border: 1px solid transparent;
            letter-spacing: 2px;
            min-width: 160px;
            text-transform: uppercase;
            white-space: normal;
            font-weight: 700;
            text-align: center;
            padding: 16px 14px 18px;
            margin-left: 20px;
            margin-right: 20px;
            color: #616467;
            box-shadow: inset 0 0 0 2px #616467;
            background-color: transparent;
            height: 48px;
        }

        #spider-plots #row-2 button:hover {
            color: #fff;
            background-color: #616467;
        }

        #world-playlist {
            padding: 50px;
            background-color: black;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        #world-playlist #row-1 {
            display: flex;
            flex-direction: row;
            justify-content: space-around;
        }

        #world-playlist #row-1 h1 {
            font-family: SpotifyHeader;
            font-size: 75px;
        }

        #world-playlist #row-1 #button-row {
            display: flex;
            flex-direction: row;
            justify-content: space-evenly;
        }

        #world-playlist #row-1 #button-row button {
            display: inline-block;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
            border-radius: 500px;
            transition-property: background-color, border-color, color, box-shadow, filter;
            transition-duration: .3s;
            border: 1px solid transparent;
            letter-spacing: 2px;
            min-width: 160px;
            text-transform: uppercase;
            white-space: normal;
            font-weight: 700;
            text-align: center;
            padding: 16px 14px 18px;
            color: #616467;
            box-shadow: inset 0 0 0 2px #616467;
            background-color: white;
            height: 48px;
        }

        #world-playlist #row-1 #button-row button:hover {
            color: #fff;
            background-color: #616467;
        }

        #world-playlist button#restart {
            align-self: center;
            display: inline-block;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            line-height: 1;
            border-radius: 500px;
            transition-property: background-color, border-color, color, box-shadow, filter;
            transition-duration: .3s;
            border: 1px solid transparent;
            letter-spacing: 2px;
            min-width: 160px;
            text-transform: uppercase;
            white-space: normal;
            font-weight: 700;
            text-align: center;
            padding: 16px 14px 18px;
            color: #fff;
            background-color: #15883e;
            height: 48px;
        }

        #world-playlist button#restart:hover {
            background-color: #1db954;
        }
    </style>
</head>

<body>
    <div id="starter-page">
        <div id="row-1">
            <h1 id="title"><img id="logo" src="images/spotify_logo.svg" alt="Spotify logo" />Global</h1>
            <p>Amy Huang (ach243), Jonna Chen (jc2627), Kate Liang (ksl67), Stephanie Zhang (swz8)</p>
            <h2 id="text">Discover your new favorite music, worldwide.</h2>
        </div>
        <div id="row-2">
            <button><a href="/login">Login with Spotify</a></button>
            <img id="world-map-photo" src="images/world-map.png" alt="world map" />
        </div>
    </div>
    <div id="explanation">
        <h1>Welcome to Spotify Global!</h1>
        <p>While many Spotify analysis tools already exist, a minimal amount of them give insight that expands beyond
            the user's music habits.</p>

        <p>For example:</p>
        <ul>
            <li><a href="https://www.statsforspotify.com/">Stats for Spotify</a> shows users their top tracks, artist,
                and genres.</li>
            <li><a href="https://pudding.cool/2020/12/judge-my-spotify/">How Bad is Your Spotify</a> judges your music
                taste in a series of snarky roasts.</li>
            <li><a href="https://www.instafest.app/">Instafest</a> generates a personalized music festival lineup based
                on the user's listening history.</li>
        </ul>

        <p>Spotify Global takes a look at your listening history but compares it to data from all around the world. We
            take the Top 50 charts from each country, letting you explore internationally to see what the world is
            listening to.</p>

        <p>Then, we let you compare your music taste against a country you're curious about. We'll tell you if your
            history is more or less danceable, energetic, happy, etc.</p>

        <p>Finally, you can get some recommendations of songs popular in that country that you're most likely to listen
            to over and over again. Don't worry, there's no black box AI algorithms here. We look at songs popular in
            your chosen country and see which have the last squared difference from your music history.</p>

        <p>Resources used:</p>
        <ul>
            <li><a href="https://www.kaggle.com/datasets/dhruvildave/spotify-charts">This Kaggle set</a> for the top 50
                songs in each country.</li>
            <li><a href="https://developer.spotify.com/documentation/web-api">The Spotify API</a> for accessing the
                user's Spotify account and getting song traits.</li>
        </ul>

        <h2>Scroll to the next page to go global.</h2>

        <img id="spotify-world-img" src="images/spotify-world.png" />
    </div>
    <div id="map-explore">
        <h3 id="map-header">Hover to learn more about a country.</h3>
        <div id="row">
            <div id="col-1">
                <div id="map-svg">
                    <svg id="world-map" height=600 width=840></svg>
                    <button id="resetButton" name="reset" type="submit">Reset</button>
                </div>
            </div>
            <div id="col-2">
                <div id="top-songs-panel">
                    <h1>Top 10 Songs <span id="country-span"></span></h1>
                </div>
            </div>
        </div>
    </div>
    <div id="spider-plots">
        <h1 id="selected"></h1>
        <div id="row-1">
            <div id="you-plot">
                <h1>You</h1>
                <svg id="user-radar-plot" height="500" width="500"></svg>
            </div>
            <div id="country-plot">
                <h1 id="country-label"></h1>
                <svg id="country-radar-plot" height="500" width="500"></svg>
            </div>
            <div id="comparison">
                <svg id="compare-text" height="300" width="400"></svg>
            </div>
        </div>
        <div id="row-2">
            <button class="timeFilter" name="4 Weeks" type="submit" value="short_term">4 weeks</button>
            <button class="timeFilter" name="6 Months" type="submit" value="medium_term">6 months</button>
            <button class="timeFilter" name="All-Time" type="submit" value="long_term">All-Time</button>
        </div>
    </div>
    <div id="world-playlist">
        <div id="row-1">
            <img src="static/images/Spotify_logo_without_text.svg" alt="logo without text" />
            <div id="right-col">
                <div id="button-row">
                    <button class="timeFilter" name="4 Weeks" type="submit" value="short_term">4 weeks</button>
                    <button class="timeFilter" name="6 Months" type="submit" value="medium_term">6 months</button>
                    <button class="timeFilter" name="All-Time" type="submit" value="long_term">All-Time</button>
                </div>
                <h1><span id="country-name">*Country*</span> Playlist For You</h1>
            </div>
        </div>
        <div id="row-2">
            all songs here
        </div>
        <button id="restart" onclick="scrollBackToMap()">Go back to country select</button>
    </div>
    <script>
        var topTracks = []
        var userAudioFeatures = []
        var relevantSongs
        var hasUserRadarPlot = false
        var hasCountryRadarPlot = false
        const radarFeatures = ["danceability", "energy", "popularity", "acousticness", "instrumentalness", "valence"]
        const featureTextMap = {
            "danceability": "danceable",
            "energy": "energetic",
            "popularity": "popular",
            "acousticness": "acoustic",
            "instrumentalness": "instrumental",
            "valence": "happy"
        }
        var userName = ""

        '{% for track in data["track_data"] %}'
        var id = ""
        var name = ""
        var url = ""

        try {
            id = JSON.parse('{{track["id"]|tojson|safe}}')
        } catch (e) {
            id = '{{track["id"]}}'
            console.log(e)
        }

        try {
            name = JSON.parse('{{track["name"]|tojson|safe}}')
        } catch (e) {
            name = '{{track["name"]}}'
            console.log(e)
        }

        try {
            url = JSON.parse('{{track["url"]|tojson|safe}}')
        } catch (e) {
            url = '{{track["url"]}}'
            console.log(e)
        }

        try {
            popularity = JSON.parse('{{track["popularity"]|tojson|safe}}')
        } catch (e) {
            popularity = '{{track["popularity"]}}'
            console.log(e)
        }

        topTracks.push({ "id": id, "name": name, "url": url, "popularity": popularity })
        '{% endfor %}'

        try {
            userName = JSON.parse('{{data["user_data"]|tojson|safe}}')
        } catch (e) {
            userName = '{{data["user_data"]}}'
            console.log(e)
        }
        console.log(userName)
        console.log(topTracks)

        var topTracksList = d3.select("#topTracks");

        for (let i = 0; i < topTracks.length; i++) {
            if (topTracks[i]["url"].substring(0, 5) != "https") {
                break
            }
            (async () => {
                const res = Promise.resolve(fetchTopTracksAudio(topTracks))
                res.then(value => {
                    if (value != null) {
                        userAudioFeatures = value;
                        drawUserRadarPlot();
                        checkCompareRadarPlot();
                        setUserView();
                    }
                })
            })();
            topTracksList.append("li").text(topTracks[i]["name"])

        }

        d3.selectAll(".timeFilter").on("click", fetchUserTopSongs);

        const drawWorldMap = async () => {
            // Load data
            let world = await d3.json("countries.geojson");
            // Remove Greenland and Antarctica
            world.features = world.features.filter(d => d.properties.ISO_A3 != "GRL" && d.properties.ISO_A3 != "ATA");
            var viral50 = await d3.json('viral_50_with_features.json');
            const countrySongMap = {}; // maps countries to lists of their top 50 songs
            Object.keys(viral50).forEach(k => {
                let song = viral50[k]
                let country = song.region
                if (countrySongMap.hasOwnProperty(country)) {
                    countrySongMap[country].push(song)
                } else {
                    countrySongMap[country] = [song]
                }
            })

            document.getElementById("top-songs-panel").style.display = "none";
            const validCountries = Object.keys(countrySongMap);

            var hoverCountry;
            var hoverCountryData;
            var selectedCountry;
            var selectedCountryData;
            relevantSongs = viral50;

            const getRelevantSongs = () => {
                let country = hoverCountryData.properties.ADMIN;
                return countrySongMap[country]
            }

            const updateSongList = (relevantSongs) => {
                if (relevantSongs.length === 0) {
                    relevantSongs = [];
                }

                let country = hoverCountryData.properties.ADMIN;
                const panel = document.getElementById('top-songs-panel')

                for (let i = 0; i < 10; i++) {
                    let rank = relevantSongs[i].rank
                    let title = relevantSongs[i].title
                    let artist = relevantSongs[i].artist

                    panel.innerHTML += "<div class='top-song'><p>#" + rank + "</p><p>" + title + "</p><p>" + artist + "</p></div>"

                }
                document.getElementById("top-songs-panel").style.display = "block";
            }

            const clearSongList = () => {
                document.getElementById('top-songs-panel').innerHTML = "<h1>Top 10 Songs <span id='country-span'></span></h1>"
                document.getElementById("top-songs-panel").style.display = "none";
            }


            const zoom = d3.zoom().scaleExtent([1, 8]).on("zoom", zoomed);
            function zoomed(event) {
                const { transform } = event;
                viewport.attr("transform", transform);
                viewport.attr("stroke-width", 1 / transform.k);
            }

            var rb = document.getElementById("resetButton");
            function reset() {
                mapSvg.transition().duration(750).call(
                    zoom.transform,
                    d3.zoomIdentity,
                    d3.zoomTransform(mapSvg.node()).invert([mapWidth / 2, mapHeight / 2])
                );
            }
            rb.addEventListener("click", reset);

            // Draw map
            const mapSvg = d3.select("#world-map");
            const mapMargin = { top: 20, left: 20, right: 20, bottom: 20 };
            const mapWidth = mapSvg.attr("width") - mapMargin.left - mapMargin.right;
            const mapHeight = mapSvg.attr("height") - mapMargin.top - mapMargin.bottom;
            const viewport = mapSvg.append("g").attr("id", "gmap");

            const projection = d3.geoMercator().fitSize([mapWidth, mapHeight], world);
            const path = d3.geoPath().projection(projection);

            mapSvg.call(zoom);

            const invalidCountryColor = "#dad7cd"
            const validCountryColor = "#a3b18a"
            const hoverCountryColor = "#6b9080"

            let countryPaths = viewport.selectAll("countries").data(world.features)
                .join("path")
                .style("fill", d => validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor)
                .attr("class", "countries")
                .attr("class", d => validCountries.includes(d.properties.ADMIN) ? "interaction" : "interaction-disabled")
                .attr("d", path);

            countryPaths.on("click", function (e, d) {
                selectedCountry = d3.select(this);
                selectedCountryData = d;
                let scountry = selectedCountryData.properties.ADMIN;

                document.getElementById("selected").innerHTML = "Let's see how you compare with " + scountry + ".";
                document.getElementById("spider-plots").scrollIntoView({ behavior: "smooth" });

                // scroll to next page
                //drawUserRadarPlot();
                relevantSongs = getRelevantSongs();
                drawCountryRadarPlot(relevantSongs, scountry);
                //checkCompareRadarPlot();
            }).on("mouseover", function (e, d) {
                hoverCountry = d3.select(this);
                hoverCountryData = d;
                let hcountry = hoverCountryData.properties.ADMIN;

                if (validCountries.includes(hcountry)) {
                    hoverCountry.style("fill", hoverCountryColor)
                    document.getElementById("map-header").innerHTML = "Click to compare your music taste with those in " + hcountry + ".";
                    document.getElementById("country-span").innerHTML = hcountry
                    relevantSongs = getRelevantSongs();
                    updateSongList(relevantSongs);
                } else {
                    document.getElementById("map-header").innerHTML = "Unfortunately, we don't have data for " + hcountry + " right now.";
                }
            }).on("mouseout", function (e, d) {
                d3.select(this).style("fill", validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor);
                document.getElementById("map-header").innerHTML = "Hover to learn more about a country.";
                clearSongList();
                document.getElementById("top-songs-panel").style.display = "none";
            });

            viewport.append("path")
                .datum(world.features)
                .attr("class", "zips_outline")
                .style("stroke", "white")
                .attr("fill-opacity", 0.0)
                .style("stroke-width", 1)
                .attr("d", path);
        }

        const drawUserPlotEmpty = async () => {
            drawRadarPlot([], "#user-radar-plot", [])
        }

        const drawCountryRadarPlotEmpty = async () => {
            drawRadarPlot([], "#country-radar-plot", [])
        }

        const drawUserRadarPlot = async () => {
            hasUserRadarPlot = true;
            const avgUserAudioFeatures = {}
            userAudioFeaturesArray = userAudioFeatures.map(d => Object.values(d)[0])
            radarFeatures.forEach(k => {
                avgUserAudioFeatures[k] = userAudioFeaturesArray.reduce((total, next) => total + next[k], 0) / userAudioFeaturesArray.length;
                avgUserAudioFeatures[k] = Math.round(avgUserAudioFeatures[k] * 100) / 100
            })
            drawRadarPlot([avgUserAudioFeatures], "#user-radar-plot")
        }

        const drawCountryRadarPlot = async (relevantSongs, hoverCountry) => {
            document.getElementById("country-label").innerText = `${hoverCountry}`

            hasCountryRadarPlot = true;
            let songFeaturesArray = []
            const avgCountryAudioFeatures = {}
            relevantSongs.forEach(song => {
                const { date_objects, chart, date, artist, rank, region, streams, title, trend, url, ...features } = song
                songFeaturesArray.push(features)
            })
            radarFeatures.forEach(k => {
                avgCountryAudioFeatures[k] = songFeaturesArray.reduce((total, next) => total + next[k], 0) / songFeaturesArray.length;
                avgCountryAudioFeatures[k] = Math.round(avgCountryAudioFeatures[k] * 100) / 100
            })

            drawRadarPlot([avgCountryAudioFeatures], "#country-radar-plot")
        }


        const drawCompareRadarPlot = () => {
            const avgUserAudioFeatures = {}
            userAudioFeaturesArray = userAudioFeatures.map(d => Object.values(d)[0])
            radarFeatures.forEach(k => {
                avgUserAudioFeatures[k] = userAudioFeaturesArray.reduce((total, next) => total + next[k], 0) / userAudioFeaturesArray.length;
                avgUserAudioFeatures[k] = Math.round(avgUserAudioFeatures[k] * 100) / 100
            })

            let songFeaturesArray = []
            const avgCountryAudioFeatures = {}
            relevantSongs.forEach(song => {
                const { date_objects, chart, date, artist, rank, region, streams, title, trend, url, ...features } = song
                songFeaturesArray.push(features)
            })
            radarFeatures.forEach(k => {
                avgCountryAudioFeatures[k] = songFeaturesArray.reduce((total, next) => total + next[k], 0) / songFeaturesArray.length;
                avgCountryAudioFeatures[k] = Math.round(avgCountryAudioFeatures[k] * 100) / 100
            })

            drawRadarPlot([avgUserAudioFeatures, avgCountryAudioFeatures], "#compare-radar-plot")
            return [avgUserAudioFeatures, avgCountryAudioFeatures]
        }

        const drawComparePlotText = (userFeatureAvg, countryFeatureAvg) => {
            let textData = [[{ text: "Your music taste is:", color: 'black' }]]
            radarFeatures.forEach(f => {
                var average = (userFeatureAvg[f] + countryFeatureAvg[f]) / 2
                var difference = (userFeatureAvg[f] - countryFeatureAvg[f]) / average
                difference = (Math.round(difference * 100 * 10) / 10)
                if (difference > 0) {
                    textData.push([
                        { text: `${Math.abs(difference)}% `, color: 'salmon' },
                        { text: `more ${featureTextMap[f]}`, color: 'black' }
                    ])
                } else if (difference == 0) {
                    textData.push([
                        { text: `Equally `, color: 'salmon' },
                        { text: `as ${featureTextMap[f]}`, color: 'black' }
                    ])
                } else {
                    textData.push([
                        { text: `${Math.abs(difference)}% `, color: 'salmon' },
                        { text: `less ${featureTextMap[f]}`, color: 'black' }
                    ])
                }
            })

            let texts = d3.select("#compare-text").selectAll('text.compare').data(textData)
                .join("text")
                .attr("class", "compare");

            let xPadding = 10;
            let yPosition = 0;
            texts.attr("x", xPadding)
                .attr("y", function (d) {
                    yPosition += 20;
                    return yPosition;
                })
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "hanging")
                .attr("font-size", 22)

            let tspans = texts.selectAll("tspan").data(d => d).join("tspan")
                .style("fill", d => d.color)
                .style("font-weight", d => d.color == "black" ? 100 : 900)
                .text(d => d.text)
        }

        const checkCompareRadarPlot = () => {
            if (hasUserRadarPlot && hasCountryRadarPlot) {
                const featureData = drawCompareRadarPlot();
                drawComparePlotText(featureData[0], featureData[1])
            }
        }

        const drawRadarPlot = async (audioFeatures, plotId) => {
            let radarPlot = d3.select(plotId);
            let radarWidth = radarPlot.attr("width")
            let radarHeight = radarPlot.attr("height")
            let radialScale = d3.scaleLinear().domain([0, 1]).range([0, 160])
            let ticks = [0.2, 0.4, 0.6, 0.8, 1]
            let plotColors = ["salmon", "#f037a5"]

            radarPlot.selectAll("circle").data(ticks)
                .join("circle")
                .attr("cx", radarWidth / 2)
                .attr("cy", radarHeight / 2)
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 2)
                .attr("r", d => radialScale(d))

            radarPlot.selectAll(".tickLabel").data(ticks)
                .join("text")
                .attr("class", "ticklabel")
                .attr("x", radarWidth / 2 + 5)
                .attr("y", d => radarHeight / 2 - radialScale(d))

                .text(d => d.toString())

            const angleToCoordinate = (angle, value) => {
                let x = Math.cos(angle) * radialScale(value);
                let y = Math.sin(angle) * radialScale(value);
                return { "x": radarWidth / 2 + x, "y": radarHeight / 2 - y };
            }

            let featureData = radarFeatures.map((f, i) => {
                let angle = (Math.PI / 2) + (2 * Math.PI * i / radarFeatures.length)
                return {
                    "name": f,
                    "angle": angle,
                    "line_coord": angleToCoordinate(angle, 1),
                    "label_coord": angleToCoordinate(angle, 1.05)
                };
            });

            // drawing the axis lines
            radarPlot.selectAll("line").data(featureData)
                .join("line")
                .attr("x1", radarWidth / 2)
                .attr("y1", radarHeight / 2)
                .attr("x2", d => d.line_coord.x)
                .attr("y2", d => d.line_coord.y)
                .attr("stroke-width", 2)
                .attr("stroke", "black")

            // // drawing the axis labels
            radarPlot.selectAll(".axisLabel").data(featureData)
                .join("text")
                .attr("class", "axisLabel")
                .attr("x", d => d.label_coord.x)
                .attr("y", (d, i) => i == 0 ? (d.label_coord.y - 10) : (i == 3 ? d.label_coord.y + 10 : d.label_coord.y))
                .attr("text-anchor", (d, i) => (i % 3 == 0) ? "middle" : (i < 3 ? "end" : "start"))
                .text(d => d.name)

            // plotting the data
            let line = d3.line().x(d => d.x).y(d => d.y);

            const getPathCoordinates = (dataPoint) => {
                let coordinates = [];
                for (var i = 0; i < radarFeatures.length; i++) {
                    let featureName = radarFeatures[i];
                    let angle = (Math.PI / 2) + (2 * Math.PI * i / radarFeatures.length);
                    coordinates.push(angleToCoordinate(angle, dataPoint[featureName]))
                }
                return coordinates
            }

            radarPlot.selectAll("path").data(audioFeatures)
                .join("path")
                .datum(d => { return getPathCoordinates(d) })
                .attr("d", line)
                .attr("stroke-width", 3)
                .attr("stroke", (d, i) => plotId == "#compare-radar-plot" ? plotColors[i] : plotId == "#user-radar-plot" ? plotColors[0] : plotColors[1])
                .attr("fill", (d, i) => plotId == "#compare-radar-plot" ? plotColors[i] : plotId == "#user-radar-plot" ? plotColors[0] : plotColors[1])
                .attr("stroke-opacity", 1)
                .attr("opacity", 0.8)
                .transition()
        }

        function scrollBackToMap() {
            document.getElementById("map-explore").scrollIntoView({ behavior: "smooth" });
        }

        async function fetchUserTopSongs() {
            term = this.value
            token = '{{access_token}}'

            let args = new URLSearchParams({
                time_range: term,
                limit: 50,
                offset: 0
            });

            const result = await fetch("https://api.spotify.com/v1/me/top/tracks?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response =>
                response.json().then(data => ({
                    data: data,
                    status: response.status
                })
                ).then(res => {
                    if (res.status != 200) {
                        return
                    }
                    tracks = res.data["items"]
                    topTracks = []
                    for (let i = 0; i < tracks.length; i++) {
                        topTracks.push({ "id": tracks[i]["id"], "name": tracks[i]["name"], "url": tracks[i]["external_urls"]["spotify"], "popularity": tracks[i]["popularity"] })
                    }
                }));

            document.getElementById("topTracks").innerHTML = "";
            var topTracksList = d3.select("#topTracks");
            for (let i = 0; i < topTracks.length; i++) {
                topTracksList.append("li").text(topTracks[i]["name"])
            }

            const res = await Promise.resolve(fetchTopTracksAudio(topTracks))
            userAudioFeatures = res
            drawUserRadarPlot();
            checkCompareRadarPlot();
        }


        async function fetchTopTracksAudio(topTracks) {
            var ids = ""
            var token = '{{access_token}}'

            for (let i = 0; i < topTracks.length; i++) {
                ids += topTracks[i]["id"] + ","
            }

            var args = new URLSearchParams({
                ids: ids,
            });

            var audioFeatures = []
            console.log("token", `${token}`)

            const result = await fetch("https://api.spotify.com/v1/audio-features?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response =>
                response.json().then(data => ({
                    data: data,
                    status: response.status
                })
                ).then(res => {
                    if (res.status != 200) {
                        return
                    }

                    tracks = res.data["audio_features"]
                    for (let i = 0; i < tracks.length; i++) {
                        var obj = {}
                        var track_id = topTracks[i]["id"]
                        obj[track_id] = {
                            "danceability": tracks[i]["danceability"],
                            "energy": tracks[i]["energy"],
                            "popularity": topTracks[i]["popularity"] / 100,
                            "acousticness": tracks[i]["acousticness"],
                            "instrumentalness": tracks[i]["instrumentalness"],
                            "valence": tracks[i]["valence"]
                        }
                        audioFeatures.push(obj)
                    }
                }));

            return audioFeatures
        }

        const setUserView = () => {
            d3.select("#hello-container").data([userName])
                .join("p")
                .text(`Hello, ${userName}. Welcome to Spotify Global!`);
        }

        drawWorldMap();
        drawUserPlotEmpty();
        drawCountryRadarPlotEmpty();
    </script>

</body>

</html>