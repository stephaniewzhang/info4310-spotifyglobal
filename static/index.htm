<html>

<head>
    <title>INFO4310 - Spotify Global</title>
    <meta charset="UTF-8">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <style>
        @font-face {
            font-family: spotifyHeader;
            src: url("fonts/Gotham-Bold.otf");
        }
        @font-face {
            font-family: spotifyNormal;
            src: url("fonts/Gotham-Light.otf");
        }
        #header {
            font-family: spotifyHeader;
            color: #535353;
            width: 80%;
        }
        #instructions {
            font-family: spotifyNormal;
            color: #535353;
        }
        #personalization {
            font-family: spotifyNormal;
            color: #535353;
        }
        #visualization {
            display: flex;
            flex-direction:row;
            text-align:left;
            flex-direction: column;
        }
        tr {
            word-break: break-all;
        }
        #song-table {
            width: 700;
        }
        #gmap {
            width:1600;
            height:2000;
        }
        body {
            background-color: #ebebdd;
        }

    </style>
</head>

<body>
    <div id="header">
        <h1>Spotify Global</h1>
        <p>Amy Huang (ach243), Jonna Chen (jc2627), Kate Liang (ksl67), Stephanie Zhang (swz8)</p>
        <p>Every year around December, we heavily await Spotify Wrapped's new features. Spotify will report every year how many countries you've listened to and we wanted to expand on that more. </p>
        <p>Here with Spotify Global, you can compare the personality of your songs with those around the world!</p>
    </div>
    <div id="instructions">

    </div>
    <div id="visualization">
        <div id = "instructions">
            <svg id="world-map" height = 400 width = 700></svg>
            <h3 id = "table-name">Please Select a Country</h3>
            <table id = "song-table">
                <thead id = "thead">
                    <tr>
                        <th>Rank</th>
                        <th>Title</th>
                        <th>Artist</th>
                    </tr>
                </thead>
                <tbody id = "tbody"></tbody>
            </table>
        </div>
        <div id = "spider">
            <svg id="user-radar-plot" height="900" width="900"></svg>
            <svg id="country-radar-plot" height="900" width="900"></svg>
        </div>
    </div>

    <div id="personalization">
        <a href="/login">Login with Spotify</a> 
        <div>
            <button class="timeFilter" name="4 Weeks" type="submit" value="short_term">4 weeks</button>
            <button class="timeFilter" name="6 Months" type="submit" value="medium_term">6 months</button>
            <button class="timeFilter" name="All-Time" type="submit" value="long_term">All-Time</button>
        </div>
        <ol id="topTracks"></ol>
    </div>
    
    <script>
        var topTracks = []
        var userAudioFeatures = []

        '{% for track in data %}'
        var id = ""
        var name = ""
        var url = ""

        try {
            id =  JSON.parse('{{track["id"]|tojson|safe}}')
        } catch(e){
            id = '{{track["id"]}}'
            console.log(e)
        }

        try {
            name = JSON.parse('{{track["name"]|tojson|safe}}')
        } catch(e){
            name = '{{track["name"]}}'
            console.log(e)
        }

        try {
            url = JSON.parse('{{track["url"]|tojson|safe}}')
        } catch(e) {
            url = '{{track["url"]}}'
            console.log(e)
        }

        try {
            popularity = JSON.parse('{{track["popularity"]|tojson|safe}}')
        } catch(e) {
            popularity = '{{track["popularity"]}}'
            console.log(e)
        }

        topTracks.push({"id": id, "name": name, "url": url, "popularity": popularity})
        '{% endfor %}'
        console.log(topTracks)

        var topTracksList = d3.select("#topTracks");

        for (let i = 0; i < topTracks.length; i++) {
            if (topTracks[i]["url"].substring(0, 5) != "https") {
                break
            }
            (async() => {
                const res = Promise.resolve(fetchTopTracksAudio(topTracks))
                res.then(value => {
                    if(value != null){
                        userAudioFeatures = value;
                        drawRadarPlot();
                    }
                })
            })();
            topTracksList.append("li").text(topTracks[i]["name"])

        }

        d3.selectAll(".timeFilter").on("click", fetchUserTopSongs);

        document.getElementById("song-table").style.display = "none";
        const drawWorldMap = async () => {
            // Load data
            let world = await d3.json("countries.geojson");
            // Remove Greenland and Antarctica
            world.features = world.features.filter(d => d.properties.ISO_A3 != "GRL" && d.properties.ISO_A3 != "ATA");
            var viral50 = await d3.json('viral_50_with_features.json');
            var viral50_csv = await d3.csv('viral_50_csv.csv');

            console.log("csv", viral50_csv);
            console.log("json", viral50)
            var hoverCountry;
            var selectedCountry;
            var selectedCountryData;
            var relevantSongs = viral50;

            const getRelevantSongs = () => {
                let relevantSongs = [];
                let country = selectedCountryData.properties.ADMIN;
                console.log("country", country)
                viral50_csv.forEach(song => {
                    let region = song.region;
                    if (region === country){
                        relevantSongs.push(song)
                    }
                });
                console.log("relevantSongs", relevantSongs);
                return relevantSongs;
            }

            const defaultSongList = () =>{
                console.log("ran default");
                let country = selectedCountryData.properties.ADMIN;
                document.getElementById("table-name").innerHTML = "Please Select a Country";
                document.getElementById("song-table").style.display = "none";

            }
            
            const updateSongList = (relevantSongs) => {
                if (relevantSongs.length === 0){
                    console.log("empty")
                    relevantSongs = [];
                }
                let country = selectedCountryData.properties.ADMIN;
                const table = document.getElementById('song-table');
                const thead = document.getElementById('thead');
		        const tbody = document.getElementById('tbody');
                
		        for (let i = 0; i < relevantSongs.length; i++) {
			        const row = tbody.insertRow(i);
			        row.insertCell(0).textContent = relevantSongs[i].rank;
			        row.insertCell(1).textContent = relevantSongs[i].title;
			        row.insertCell(2).textContent = relevantSongs[i].artist;
		        }
                document.getElementById("table-name").innerHTML = "Viral 50 Songs for " + country;
                document.getElementById("song-table").style.display = "block";
            }

            // Draw map
            const mapSvg = d3.select("#world-map");
            const mapMargin = { top: 20, left: 20, right: 20, bottom: 20 };
            const mapWidth = mapSvg.attr("width") - mapMargin.left - mapMargin.right;
            const mapHeight = mapSvg.attr("height") - mapMargin.top - mapMargin.bottom;
            const viewport = mapSvg.append("g").attr("id", "gmap");

            const projection = d3.geoMercator().fitSize([mapWidth, mapHeight], world);
            const path = d3.geoPath().projection(projection);
            
            let countryPaths = viewport.selectAll("countries").data(world.features)
            .join("path")
            .style("fill", "#535353")
            .attr("class", "countries")
            .attr("d", path);

            countryPaths.on("click", function (e, d) {
                    if (selectedCountry == null) {
                        console.log("initialize")
                        selectedCountry = d3.select(this);
                        selectedCountry.style("fill", "#1db954");
                        selectedCountryData = d;
                        relevantSongs = getRelevantSongs()
                        updateSongList(relevantSongs);
                    } else if (selectedCountryData === d) {
                        console.log("pressed on the same -- deselect");
                        selectedCountry.style("fill", "#535353");
                        selectedCountry = null;
                        defaultSongList();
                    } else {
                        console.log("pressed on diff country");
                        selectedCountry.style("fill", "#535353");
                        selectedCountry = d3.select(this);
                        console.log("new selected country", selectedCountry);
                        selectedCountry.style("fill", "#1db954");
                        selectedCountryData = d;
                        let relevantSongs = getRelevantSongs()
                        updateSongList(relevantSongs);
                    }
                    // TODO -- change to be real data
                    drawRadarPlot();

            }).on("mouseover", function (e, d) {
                hoverCountry = d3.select(this);
                hoverCountry.style("fill", "#1db954");
                hoverCountryData = d;
                let hcountry = hoverCountryData.properties.ADMIN;
                document.getElementById("table-name").innerHTML = "Do you want to compare music taste with "+ hcountry + "?";
            }).on("mouseout", function (e, d) {
                // console.log(selectedCountry == null);
                if (selectedCountry == null|| selectedCountryData.properties.ADMIN != d.properties.ADMIN){
                    d3.select(this).style("fill","#535353");
                    document.getElementById("table-name").innerHTML = "Please Select a Country";
                } else {
                    d3.select(this).style("fill","#1db954");
                }
            });
            
            viewport.append("path")
            .datum(world.features)
            .attr("class", "zips_outline")
            .style("stroke", "white")
            .attr("fill-opacity", 0.0)
            .style("stroke-width", 1)
            .attr("d", path);
        }

        const drawUserRadarPlot = async () => {

        }

        const drawCountryRadarPlot = async () => {
            const avgUserAudioFeatures = {}
            userAudioFeaturesArray = userAudioFeatures.map(d => Object.values(d)[0])
            const features = Object.keys(userAudioFeaturesArray[0]);
            features.forEach(k => {
                avgUserAudioFeatures[k] = userAudioFeaturesArray.reduce((total, next) => total + next[k], 0) / userAudioFeaturesArray.length;
                avgUserAudioFeatures[k] = Math.round(avgUserAudioFeatures[k] * 100) / 100
            })

            drawRadarPlot(avgUserAudioFeatures, "#user-radar-plot")
        }

        const drawRadarPlot = async (audioFeatures, plotId) => {
            let radarPlot = d3.select(plotId);
            let radarWidth = radarPlot.attr("width")
            let radarHeight = radarPlot.attr("height")
            let radialScale = d3.scaleLinear().domain([0, 1]).range([0, 250]) 
            let ticks = [0.2, 0.4, 0.6, 0.8, 1] 

            radarPlot.selectAll("circle").data(ticks)
                     .join("circle")
                     .attr("cx", radarWidth / 2)
                     .attr("cy", radarHeight / 2)
                     .attr("fill", "none")
                     .attr("stroke", "#ccc")
                     .attr("r", d => radialScale(d))

            radarPlot.selectAll(".tickLabel").data(ticks)
                     .join("text")
                     .attr("class", "ticklabel")
                     .attr("x", radarWidth / 2 + 5)
                     .attr("y", d => radarHeight / 2 - radialScale(d))
                     .text(d => d.toString())

            const angleToCoordinate = (angle, value) => {
                let x = Math.cos(angle) * radialScale(value);
                let y = Math.sin(angle) * radialScale(value);
                return {"x": radarWidth / 2 + x, "y": radarHeight / 2 - y};
            }

            let featureData = features.map((f, i) => {
                let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length)
                return {
                    "name": f,
                    "angle": angle,
                    "line_coord": angleToCoordinate(angle, 1),
                    "label_coord": angleToCoordinate(angle, 1.05)
                };
            });

            // drawing the axis lines
            radarPlot.selectAll("line").data(featureData)
                     .join("line")
                     .attr("x1", radarWidth / 2)
                     .attr("y1", radarHeight / 2)
                     .attr("x2", d => d.line_coord.x)
                     .attr("y2", d => d.line_coord.y)
                     .attr("stroke","black")

            // // drawing the axis labels
            radarPlot.selectAll(".axisLabel").data(featureData)
                     .join("text")
                     .attr("class", "axisLabel")
                     .attr("x", d => d.label_coord.x)
                     .attr("y", (d, i) => i == 0 ? (d.label_coord.y - 10) : (i == 3 ? d.label_coord.y + 10 : d.label_coord.y))
                     .attr("text-anchor", (d, i) => (i % 3 == 0) ? "middle" : (i < 3 ? "end" : "start"))
                     .text(d => d.name)

            // plotting the data
            let line = d3.line().x(d => d.x).y(d => d.y);

            const getPathCoordinates = (dataPoint) => {
                let coordinates = [];
                for (var i = 0; i < features.length; i++) {
                    let featureName = features[i];
                    let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length);
                    coordinates.push(angleToCoordinate(angle, dataPoint[featureName]))
                }
                return coordinates
            } 
            radarPlot.selectAll("path").data([audioFeatures])
                     .join("path")
                     .datum(d => { return getPathCoordinates(d) })
                     .attr("d", line)
                     .attr("stroke-width", 3)
                     .attr("stroke", "salmon")
                     .attr("fill", "salmon")
                     .attr("stroke-opacity", 1)
                     .attr("opacity", 0.5)
        }

        async function fetchUserTopSongs() {
            term = this.value
            token = '{{access_token}}'

            let args = new URLSearchParams({
                time_range: term,
                limit: 50,
                offset: 0
            });

            const result = await fetch("https://api.spotify.com/v1/me/top/tracks?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response => 
                response.json().then(data => ({
                    data: data,
                    status: response.status
                })
            ).then(res => {
                if(res.status != 200){
                    return
                }
                tracks = res.data["items"]
                topTracks = []
                for(let i = 0; i < tracks.length; i++){
                    topTracks.push({"id": tracks[i]["id"], "name": tracks[i]["name"], "url": tracks[i]["external_urls"]["spotify"], "popularity": tracks[i]["popularity"]})
                }
            }));

            document.getElementById("topTracks").innerHTML = "";
            var topTracksList = d3.select("#topTracks");
            for(let i = 0; i < topTracks.length; i++){
                topTracksList.append("li").text(topTracks[i]["name"])
            }

            const res =  await Promise.resolve(fetchTopTracksAudio(topTracks))
            userAudioFeatures = res
            drawRadarPlot();
        }


        async function fetchTopTracksAudio(topTracks){
            var ids = ""
            var token = '{{access_token}}'

            for (let i = 0; i < topTracks.length; i++){
                ids += topTracks[i]["id"] + ","
            }

            var args = new URLSearchParams({
                ids: ids,
            });

            var audioFeatures = []
            console.log("token", `${token}`)

            const result = await fetch("https://api.spotify.com/v1/audio-features?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response => 
                response.json().then(data => ({
                    data: data,
                    status: response.status
                })
            ).then(res => {
                if(res.status != 200){
                    return
                }

                tracks = res.data["audio_features"]
                for(let i = 0; i < tracks.length; i++){
                    var obj = {}
                    var track_id = topTracks[i]["id"]
                    obj[track_id] = {
                        "danceability": tracks[i]["danceability"], 
                        "energy": tracks[i]["energy"], 
                        "popularity": topTracks[i]["popularity"] / 100, 
                        "acousticness": tracks[i]["acousticness"],
                        "instrumentalness": tracks[i]["instrumentalness"],
                        "valence": tracks[i]["valence"]
                    }
                    audioFeatures.push(obj)
                }
            }));

            return audioFeatures
        }

        drawWorldMap();
    </script>
    
</body>

</html>