<html>

<head>
    <title>INFO4310 - Spotify Global</title>
    <meta charset="UTF-8">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <style>
        @font-face {
            font-family: spotifyHeader;
            src: url("fonts/Gotham-Bold.otf");
        }
        @font-face {
            font-family: spotifyNormal;
            src: url("fonts/Gotham-Light.otf");
        }
        #header {
            font-family: spotifyHeader;
            color: #535353;
            width: 80%;
        }
        #personalization {
            font-family: spotifyNormal;
            color: #535353;
        }
        #visualization {
            display: flex;
            flex-direction:row;
            text-align:left;
            flex-direction: column;
        }
        #track-container {
            font-family: spotifyNormal;
            color: #535353;
        }
        tr {
            word-break: break-all;
        }
        #song-table {
            width: 700;
        }
        tbody {
            font-family: spotifyHeader;
            color: #535353;
        }
        #gmap {
            width:1600;
            height:2000;
        }
        body {
            background-color: #ebebdd;
        }
        #individual-radar-plots {
            display: flex;
            flex-direction: row;
        }
        .interaction-disabled {
            pointer-events: none;
        }
        .container #resetButton {
            position: relative;
            top: 40%;
            left: 0%;
            transform: translate(-50%, -50%);
            -ms-transform: translate(-50%, -50%);
            
        }
        
    </style>
</head>

<body>
    <div id="header">
        <h1>Spotify Global</h1>
        <p>Amy Huang (ach243), Jonna Chen (jc2627), Kate Liang (ksl67), Stephanie Zhang (swz8)</p>
        <p>Every year around December, we heavily await Spotify Wrapped's new features. Spotify will report every year how many countries you've listened to and we wanted to expand on that more. </p>
        <p>Here with Spotify Global, you can compare the personality of your songs with those around the world!</p>
    </div>
    <div id="personalization">
        <a href="/login">Login with Spotify</a> 
        <div>
            <button class="timeFilter" name="4 Weeks" type="submit" value="short_term">4 weeks</button>
            <button class="timeFilter" name="6 Months" type="submit" value="medium_term">6 months</button>
            <button class="timeFilter" name="All-Time" type="submit" value="long_term">All-Time</button>
        </div>
    </div>
    <div id="hello-container"></div>
    <div id="visualization">
        <h3 id="table-name">Please Select a Country</h3>
        <div class = "container">
            <svg id="world-map" height = 610 width = 975></svg>
            <button id = "resetButton" name = "reset" type = "submit">Reset</button>
        </div>
        <div id ="radar-container">
            <div id="radar-plots">
                <div id="individual-radar-plots">
                    <p>You</p>
                    <svg id="user-radar-plot" height="500" width="500"></svg>
                    <p id="country-label">Select a country</p>
                    <svg id="country-radar-plot" height="500" width="500"></svg>
                </div>
                <div>
                    <svg id="compare-radar-plot" height="500" width="500"></svg>
                    <svg id="compare-text" height="300" width="500"></svg>
                </div>
            </div>
        </div>
        <div id="track-container">
            <ol id="topTracks"></ol>
            <table id = "song-table">
                <thead id = "thead">
                    <tr>
                        <th>Rank</th>
                        <th>Title</th>
                        <th>Artist</th>
                    </tr>
                </thead>
                <tbody id = "tbody"></tbody>
            </table>
        </div>
    </div>
    
    <script>
        var topTracks = []
        var userAudioFeatures = []
        var relevantSongs
        var hasUserRadarPlot = false 
        var hasCountryRadarPlot = false
        const radarFeatures =  ["danceability", "energy", "popularity", "acousticness", "instrumentalness", "valence"]
        const featureTextMap = {
            "danceability": "danceable", 
            "energy": "energetic", 
            "popularity": "popular", 
            "acousticness": "acoustic", 
            "instrumentalness": "instrumental", 
            "valence": "happy"
        }
        var userName = ""

        '{% for track in data["track_data"] %}'
        var id = ""
        var name = ""
        var url = ""
        
        try {
            id =  JSON.parse('{{track["id"]|tojson|safe}}')
        } catch(e){
            id = '{{track["id"]}}'
            console.log(e)
        }
        
        try {
            name = JSON.parse('{{track["name"]|tojson|safe}}')
        } catch(e){
            name = '{{track["name"]}}'
            console.log(e)
        }
        
        try {
            url = JSON.parse('{{track["url"]|tojson|safe}}')
        } catch(e) {
            url = '{{track["url"]}}'
            console.log(e)
        }
        
        try {
            popularity = JSON.parse('{{track["popularity"]|tojson|safe}}')
        } catch(e) {
            popularity = '{{track["popularity"]}}'
            console.log(e)
        }
        
        topTracks.push({"id": id, "name": name, "url": url, "popularity": popularity})
        '{% endfor %}'

        try {
            userName = JSON.parse('{{data["user_data"]|tojson|safe}}')
        } catch (e) {
            userName = '{{data["user_data"]}}'
            console.log(e)
        }
        console.log(userName)
        console.log(topTracks)
        
        var topTracksList = d3.select("#topTracks");
        
        for (let i = 0; i < topTracks.length; i++) {
            if (topTracks[i]["url"].substring(0, 5) != "https") {
                break
            }
            (async() => {
                const res = Promise.resolve(fetchTopTracksAudio(topTracks))
                res.then(value => {
                    if(value != null){
                        userAudioFeatures = value;
                        drawUserRadarPlot();
                        checkCompareRadarPlot();
                        setUserView();
                    }
                })
            })();
            topTracksList.append("li").text(topTracks[i]["name"])
            
        }
        
        d3.selectAll(".timeFilter").on("click", fetchUserTopSongs);
        
        document.getElementById("song-table").style.display = "none";
        const drawWorldMap = async () => {
            // Load data
            let world = await d3.json("countries.geojson");
            // Remove Greenland and Antarctica
            world.features = world.features.filter(d => d.properties.ISO_A3 != "GRL" && d.properties.ISO_A3 != "ATA");
            var viral50 = await d3.json('viral_50_with_features.json');
            const countrySongMap = {}; // maps countries to lists of their top 50 songs
            Object.keys(viral50).forEach(k => {
                let song = viral50[k]
                let country = song.region
                if (countrySongMap.hasOwnProperty(country)) {
                    countrySongMap[country].push(song)
                } else {
                    countrySongMap[country] = [song]
                }
            })
            const validCountries = Object.keys(countrySongMap);
            
            var hoverCountry;
            var selectedCountry;
            var selectedCountryData;
            relevantSongs = viral50;
            
            const getRelevantSongs = () => {
                let country = selectedCountryData.properties.ADMIN;
                return countrySongMap[country]
            }
            
            const defaultSongList = () =>{
                console.log("ran default");
                let country = selectedCountryData.properties.ADMIN;
                document.getElementById("table-name").innerHTML = "Please Select a Country";
                document.getElementById("song-table").style.display = "none";
            }
            
            const updateSongList = (relevantSongs) => {
                if (relevantSongs.length === 0){
                    console.log("empty")
                    relevantSongs = [];
                }
                let country = selectedCountryData.properties.ADMIN;
                const table = document.getElementById('song-table');
                const thead = document.getElementById('thead');
                const tbody = document.getElementById('tbody');
                
                for (let i = 0; i < relevantSongs.length; i++) {
                    const row = tbody.insertRow(i);
                    row.insertCell(0).textContent = relevantSongs[i].rank;
                    row.insertCell(1).textContent = relevantSongs[i].title;
                    row.insertCell(2).textContent = relevantSongs[i].artist;
                }
                document.getElementById("table-name").innerHTML = "Viral 50 Songs for " + country;
                document.getElementById("song-table").style.display = "block";
            }
            
            const zoom = d3.zoom().scaleExtent([1, 8]).on("zoom", zoomed);
            function zoomed(event) {
                const {transform} = event;
                viewport.attr("transform", transform);
                viewport.attr("stroke-width", 1 / transform.k);
            }
            
            var rb = document.getElementById("resetButton");
            function reset() {
                mapSvg.transition().duration(750).call(
                zoom.transform,
                d3.zoomIdentity,
                d3.zoomTransform(mapSvg.node()).invert([mapWidth / 2, mapHeight / 2])
                );
            }
            rb.addEventListener("click", reset);
            
            
            
            function clicked(event, d) {
                const [[x0, y0], [x1, y1]] = path.bounds(d);
                event.stopPropagation();
                mapSvg.transition().duration(750).call(
                    zoom.transform,
                    d3.zoomIdentity
                        .translate(mapWidth / 2, mapHeight / 2)
                        .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / mapWidth, (y1 - y0) / mapHeight)))
                        .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),
                        d3.pointer(event, mapSvg.node())
                );
            }
            
            
            // Draw map
            const mapSvg = d3.select("#world-map");
            const mapMargin = { top: 20, left: 20, right: 20, bottom: 20 };
            const mapWidth = mapSvg.attr("width") - mapMargin.left - mapMargin.right;
            const mapHeight = mapSvg.attr("height") - mapMargin.top - mapMargin.bottom;
            const viewport = mapSvg.append("g").attr("id", "gmap");
            
            const projection = d3.geoMercator().fitSize([mapWidth, mapHeight], world);
            const path = d3.geoPath().projection(projection);
            
            const invalidCountryColor = "#dad7cd"
            const validCountryColor = "#a3b18a"
            const selectedCountryColor = "#6b9080"
            
            mapSvg.call(zoom);
            
            let countryPaths = viewport.selectAll("countries").data(world.features)
            .join("path")
            .style("fill", d => validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor)
            .attr("class", "countries")
            .attr("class", d => validCountries.includes(d.properties.ADMIN) ? "interaction" : "interaction-disabled")
            .attr("d", path);
            
            countryPaths.on("click", function (e, d) {
                if (selectedCountry == null) {
                    console.log("initialize")
                    selectedCountry = d3.select(this);
                    selectedCountry.style("fill", selectedCountryColor);
                    selectedCountryData = d;
                    relevantSongs = getRelevantSongs()
                    updateSongList(relevantSongs);
                } else if (selectedCountryData === d) {
                    console.log("pressed on the same -- deselect");
                    selectedCountry.style("fill", validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor);
                    selectedCountry = null;
                    defaultSongList();
                } else {
                    console.log("pressed on diff country");
                    selectedCountry.style("fill", validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor);
                    selectedCountry = d3.select(this);
                    console.log("new selected country", selectedCountry);
                    selectedCountry.style("fill", selectedCountryColor);
                    selectedCountryData = d;
                    relevantSongs = getRelevantSongs()
                    updateSongList(relevantSongs);
                }
                clicked(e,d);
                drawUserRadarPlot();
                drawCountryRadarPlot(relevantSongs, selectedCountryData.properties.ADMIN);
                checkCompareRadarPlot();
            }).on("mouseover", function (e, d) {
                hoverCountry = d3.select(this);
                hoverCountryData = d;
                let hcountry = hoverCountryData.properties.ADMIN;
                hoverCountry.style("fill", validCountries.includes(hcountry) ? selectedCountryColor : invalidCountryColor);
                document.getElementById("table-name").innerHTML = "Do you want to compare music taste with "+ hcountry + "?";
            }).on("mouseout", function (e, d) {
                // console.log(selectedCountry == null);
                if (selectedCountry == null|| selectedCountryData.properties.ADMIN != d.properties.ADMIN){
                    d3.select(this).style("fill", validCountries.includes(d.properties.ADMIN) ? validCountryColor : invalidCountryColor);
                    document.getElementById("table-name").innerHTML = "Please Select a Country";
                } else {
                    d3.select(this).style("fill", selectedCountryColor);
                }
            });
            
            viewport.append("path")
            .datum(world.features)
            .attr("class", "zips_outline")
            .style("stroke", "white")
            .attr("fill-opacity", 0.0)
            .style("stroke-width", 1)
            .attr("d", path);
        }

        const drawUserPlotEmpty = async () => {
            drawRadarPlot([], "#user-radar-plot", [])
        }
        
        const drawCountryRadarPlotEmpty = async () => {
            drawRadarPlot([], "#country-radar-plot", [])
        }

        const drawUserRadarPlot = async () => {
            hasUserRadarPlot = true;
            const avgUserAudioFeatures = {}
            userAudioFeaturesArray = userAudioFeatures.map(d => Object.values(d)[0])
            radarFeatures.forEach(k => {
                avgUserAudioFeatures[k] = userAudioFeaturesArray.reduce((total, next) => total + next[k], 0) / userAudioFeaturesArray.length;
                avgUserAudioFeatures[k] = Math.round(avgUserAudioFeatures[k] * 100) / 100
            })
            drawRadarPlot([avgUserAudioFeatures], "#user-radar-plot")
        }

        const drawCountryRadarPlot = async (relevantSongs, selectedCountry) => {
            document.getElementById("country-label").innerText = `${selectedCountry}`

            hasCountryRadarPlot = true;
            let songFeaturesArray = []
            const avgCountryAudioFeatures = {}
            relevantSongs.forEach(song => {
                const {date_objects, chart, date, artist, rank, region, streams, title, trend, url, ...features} = song
                songFeaturesArray.push(features)
            })
            radarFeatures.forEach(k => {
                avgCountryAudioFeatures[k] = songFeaturesArray.reduce((total, next) => total + next[k], 0) / songFeaturesArray.length;
                avgCountryAudioFeatures[k] = Math.round(avgCountryAudioFeatures[k] * 100) / 100
            })

            drawRadarPlot([avgCountryAudioFeatures], "#country-radar-plot")
        }


        const drawCompareRadarPlot = () => {
            const avgUserAudioFeatures = {}
            userAudioFeaturesArray = userAudioFeatures.map(d => Object.values(d)[0])
            radarFeatures.forEach(k => {
                avgUserAudioFeatures[k] = userAudioFeaturesArray.reduce((total, next) => total + next[k], 0) / userAudioFeaturesArray.length;
                avgUserAudioFeatures[k] = Math.round(avgUserAudioFeatures[k] * 100) / 100
            })

            let songFeaturesArray = []
            const avgCountryAudioFeatures = {}
            relevantSongs.forEach(song => {
                const {date_objects, chart, date, artist, rank, region, streams, title, trend, url, ...features} = song
                songFeaturesArray.push(features)
            })
            radarFeatures.forEach(k => {
                avgCountryAudioFeatures[k] = songFeaturesArray.reduce((total, next) => total + next[k], 0) / songFeaturesArray.length;
                avgCountryAudioFeatures[k] = Math.round(avgCountryAudioFeatures[k] * 100) / 100
            })

            drawRadarPlot([avgUserAudioFeatures, avgCountryAudioFeatures], "#compare-radar-plot")
            return [avgUserAudioFeatures, avgCountryAudioFeatures]
        }

        const drawComparePlotText = (userFeatureAvg, countryFeatureAvg) => {
            let textData = [[{ text: "Your music taste is:", color: 'black' }]]
            radarFeatures.forEach(f => {
                var average = (userFeatureAvg[f] + countryFeatureAvg[f]) / 2
                var difference = (userFeatureAvg[f] - countryFeatureAvg[f]) / average
                difference = (Math.round(difference * 100 * 10) / 10)
                if (difference > 0) {
                    textData.push([
                        { text: `${Math.abs(difference)}% `, color: 'salmon' }, 
                        { text: `more ${featureTextMap[f]}`, color: 'black' }
                    ])
                } else if (difference == 0) {
                    textData.push([
                        { text: `Equally `, color: 'salmon' }, 
                        { text: `as ${featureTextMap[f]}`, color: 'black' }
                    ])
                } else {
                    textData.push([
                        { text: `${Math.abs(difference)}% `, color: 'salmon' }, 
                        { text: `less ${featureTextMap[f]}`, color: 'black' }
                    ])
                }
            })

            let texts = d3.select("#compare-text").selectAll('text.compare').data(textData)
                    .join("text")
                    .attr("class", "compare");

            let xPadding = 10;
            let yPosition = 0;
            texts.attr("x", xPadding)
                .attr("y", function (d) {
                    yPosition += 20;
                    return yPosition;
                })
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "hanging")
                .attr("font-size", 22)

            let tspans = texts.selectAll("tspan").data(d => d).join("tspan")
                .style("fill", d => d.color)
                .style("font-weight", d => d.color == "black" ? 100 : 900)
                .text(d => d.text)
        }
        
        const checkCompareRadarPlot = () => {
            if (hasUserRadarPlot && hasCountryRadarPlot) {
                const featureData = drawCompareRadarPlot();
                drawComparePlotText(featureData[0], featureData[1])
            }
        }

        const drawRadarPlot = async (audioFeatures, plotId) => {
            let radarPlot = d3.select(plotId);
            let radarWidth = radarPlot.attr("width")
            let radarHeight = radarPlot.attr("height")
            let radialScale = d3.scaleLinear().domain([0, 1]).range([0, 160]) 
            let ticks = [0.2, 0.4, 0.6, 0.8, 1]
            let plotColors = ["salmon",  "#6495ED"]
            
            radarPlot.selectAll("circle").data(ticks)
            .join("circle")
            .attr("cx", radarWidth / 2)
            .attr("cy", radarHeight / 2)
            .attr("fill", "none")
            .attr("stroke", "#ccc")
            .attr("r", d => radialScale(d))
            
            radarPlot.selectAll(".tickLabel").data(ticks)
            .join("text")
            .attr("class", "ticklabel")
            .attr("x", radarWidth / 2 + 5)
            .attr("y", d => radarHeight / 2 - radialScale(d))
            .text(d => d.toString())
            
            const angleToCoordinate = (angle, value) => {
                let x = Math.cos(angle) * radialScale(value);
                let y = Math.sin(angle) * radialScale(value);
                return {"x": radarWidth / 2 + x, "y": radarHeight / 2 - y};
            }

            let featureData = radarFeatures.map((f, i) => {
                let angle = (Math.PI / 2) + (2 * Math.PI * i / radarFeatures.length)
                return {
                    "name": f,
                    "angle": angle,
                    "line_coord": angleToCoordinate(angle, 1),
                    "label_coord": angleToCoordinate(angle, 1.05)
                };
            });
            
            // drawing the axis lines
            radarPlot.selectAll("line").data(featureData)
            .join("line")
            .attr("x1", radarWidth / 2)
            .attr("y1", radarHeight / 2)
            .attr("x2", d => d.line_coord.x)
            .attr("y2", d => d.line_coord.y)
            .attr("stroke","black")
            
            // // drawing the axis labels
            radarPlot.selectAll(".axisLabel").data(featureData)
            .join("text")
            .attr("class", "axisLabel")
            .attr("x", d => d.label_coord.x)
            .attr("y", (d, i) => i == 0 ? (d.label_coord.y - 10) : (i == 3 ? d.label_coord.y + 10 : d.label_coord.y))
            .attr("text-anchor", (d, i) => (i % 3 == 0) ? "middle" : (i < 3 ? "end" : "start"))
            .text(d => d.name)
            
            // plotting the data
            let line = d3.line().x(d => d.x).y(d => d.y);
            
            const getPathCoordinates = (dataPoint) => {
                let coordinates = [];
                for (var i = 0; i < radarFeatures.length; i++) {
                    let featureName = radarFeatures[i];
                    let angle = (Math.PI / 2) + (2 * Math.PI * i / radarFeatures.length);
                    coordinates.push(angleToCoordinate(angle, dataPoint[featureName]))
                }
                return coordinates
            } 

            radarPlot.selectAll("path").data(audioFeatures)
            .join("path")
            .datum(d => { return getPathCoordinates(d) })
            .attr("d", line)
            .attr("stroke-width", 3)
            .attr("stroke", (d, i) => plotId == "#compare-radar-plot" ? plotColors[i] : plotId == "#user-radar-plot" ? plotColors[0] : plotColors[1])
            .attr("fill",(d, i) => plotId == "#compare-radar-plot" ? plotColors[i] : plotId == "#user-radar-plot" ? plotColors[0] : plotColors[1])
            .attr("stroke-opacity", 1)
            .attr("opacity", 0.5)
            .transition()
        }

        async function fetchUserTopSongs() {
            term = this.value
            token = '{{access_token}}'
            
            let args = new URLSearchParams({
                time_range: term,
                limit: 50,
                offset: 0
            });
            
            const result = await fetch("https://api.spotify.com/v1/me/top/tracks?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response => 
            response.json().then(data => ({
                data: data,
                status: response.status
            })
            ).then(res => {
                if(res.status != 200){
                    return
                }
                tracks = res.data["items"]
                topTracks = []
                for(let i = 0; i < tracks.length; i++){
                    topTracks.push({"id": tracks[i]["id"], "name": tracks[i]["name"], "url": tracks[i]["external_urls"]["spotify"], "popularity": tracks[i]["popularity"]})
                }
            }));
            
            document.getElementById("topTracks").innerHTML = "";
            var topTracksList = d3.select("#topTracks");
            for(let i = 0; i < topTracks.length; i++){
                topTracksList.append("li").text(topTracks[i]["name"])
            }
            
            const res =  await Promise.resolve(fetchTopTracksAudio(topTracks))
            userAudioFeatures = res
            drawUserRadarPlot();
            checkCompareRadarPlot();
        }
        
        
        async function fetchTopTracksAudio(topTracks){
            var ids = ""
            var token = '{{access_token}}'
            
            for (let i = 0; i < topTracks.length; i++){
                ids += topTracks[i]["id"] + ","
            }
            
            var args = new URLSearchParams({
                ids: ids,
            });
            
            var audioFeatures = []
            console.log("token", `${token}`)
            
            const result = await fetch("https://api.spotify.com/v1/audio-features?" + args, {
                method: "GET", headers: { Authorization: `Bearer ${token}` }
            }).then(response => 
            response.json().then(data => ({
                data: data,
                status: response.status
            })
            ).then(res => {
                if(res.status != 200){
                    return
                }
                
                tracks = res.data["audio_features"]
                for(let i = 0; i < tracks.length; i++){
                    var obj = {}
                    var track_id = topTracks[i]["id"]
                    obj[track_id] = {
                        "danceability": tracks[i]["danceability"], 
                        "energy": tracks[i]["energy"], 
                        "popularity": topTracks[i]["popularity"] / 100, 
                        "acousticness": tracks[i]["acousticness"],
                        "instrumentalness": tracks[i]["instrumentalness"],
                        "valence": tracks[i]["valence"]
                    }
                    audioFeatures.push(obj)
                }
            }));
            
            return audioFeatures
        }

        const setUserView = () => {
            d3.select("#hello-container").data([userName])
              .join("p")
              .text(`Hello, ${userName}. Welcome to Spotify Global!`);
        }

        drawWorldMap();
        drawUserPlotEmpty();
        drawCountryRadarPlotEmpty();
    </script>
    
</body>

</html>